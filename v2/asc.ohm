AsynchronousSoftwareComponents {
  program = ws* topcomponent+
  topcomponent = topnewcomponent | topsameas
  topsameas = ident "=" ws* ident lb declOrAction+ rb
  topnewcomponent = ident lb declOrAction+ rb
  component = ident lb declOrAction+ rb

  declOrAction = declaration | compositionAction
  declaration = inputDecl | outputDecl | childDecl
  
  inputDecl = "input" ws* ident
  outputDecl = "output" ws* ident

  compositionAction = letBlock | forgetAction | addChildAction| addConnectionAction | reactAction
  reactAction = on ident "=>" ws* connectionID reactOperation

  childDecl = "child" ws* innerComponent
  reactOperation = reaction | reactions
  reactions = lb reaction+ rb
  reaction =   at (callOperation | sendDownwardOperation | sendUpwardOperation)

  callOperation = "call" ws* ident
  sendDownwardOperation = "send" ws* "downward" ws* ident
  sendUpwardOperation = "send" ws* "upward" ws* ident

  forgetAction = "forget" ws* "connection" ws* ident
  addChildAction = "add" ws* "child" ws* ident
  addConnectionAction = "add" ws* "connection" ws connectionID portident portident
  
  innerComponent = component

  letBlock = "let" ws* ident "=" ws* expression lb compositionOrReaction+ rb
  compositionOrReaction = compositionAction | reactOperation

  expression = newExpression
  newExpression = "new" ws* ident


  connectionID = rootedIdent ws*
  portident = inputportident | outputportident | selfinputportident | selfoutputportident
  inputportident = absoluteIdent "/" "i" ws* ":" ws* absoluteIdent ws*
  outputportident = absoluteIdent "/" "o" ws* ":" ws* absoluteIdent ws*
  selfinputportident = "./" "i" ws* ":" ws* absoluteIdent ws*
  selfoutputportident = "./" "o" ws* ":" ws* absoluteIdent ws*
  
  keyword = ("on" | "input" | "output" | "child" | "send" | "downward" | "upward" | "call" | "new" | "forget" | "add" | "connection" | "child" | "i" | "o") &ws ws*
  ident = id ws*
  id = rootedIdent | qualifiedIdent | absoluteIdent
  rootedIdent = "." "/" absoluteIdent ws* ":" absoluteIdentOrIndex
  qualifiedIdent = absoluteIdent ws* "/" absoluteIdent ws* ":" absoluteIdentOrIndex
  absoluteIdent = ~keyword identFirst identRest*
  identFirst = "A" .. "Z" | "a" .. "z"
  identRest = "0" .. "9" | "_" | identFirst
  on = "on" ws+
  lb = "{" ws*
  rb = "}" ws*

  at = "@" ws* 
  absoluteIdentOrIndex = absoluteIdent | index
  index = dig+
  dig = "0" .. "9"
  
  ws = " " | "\n"
  
}
