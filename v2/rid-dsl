kind {
  namespace [input]
  namespace [output]
  namespace [kind]
  namespace [asc]
  collection [connection]
}

def-top-level-kind-raw-no-supercede
def-top-level-kind-raw-supercede
def-kind-raw-no-supercede
def-kind-raw-supercede

kind-NewScope
kind-PopScope
def-input
def-ouput
add-asc (name)
add-connection (connection-name port-rid action)



getter (rid):
  result <= c.ns[name]
    where deconstruct rid => (_, ns, name)
    synonym c, component
    where component = @ea (rid)

setter (rid val):
  c.ns[name] <= val
    where deconstruct rid => (_, ns, name)
    synonym ns, namespace, "namespace within component"
    synonym c, component
    where component = @ea (rid)
    design rule "must not already have a value"

def (rid):
  @define all paths (rid)
  where:
    define all paths (rid):
      ea (rid)

where:
  ea (rid):
    ea-raw (rid) | design rule "must be a component" => result

  ea-raw (rid):
    typecase (rid.path):
    case string: lookup (rid.path) => result
      design rule (result) "must not be empty"
    case _:
      @getter (ref) => child
      child.static => result
	before 
	  where ref = rid.path
	  synonym ref, component-reference, "recursive reference to a component"
	  design rule (ref) "must contain a component namespace reference"



design rules:

rid must contain a component namespace reference (rid):
  "c" === rid.ns

must be a component:
  typeof (in) === "component"

must not already have a value:
  component.ns[name] === no-value
