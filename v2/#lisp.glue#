  program [@ws @c] = [[${ws}${c}]]

  topcomponent [c] = [[${c}]]
  topsameas  [id1 eq @ws id2 lb @da rb] = 
    {{scopeAdd ('component',_id1._glue ());}}
[[(defun new-${id1} ()
(let ((${id1} (new-${id2})))
    (setter-kind ${id1} "${id1}")
    ${da}
    ${id1}))

]]
  topnewcomponent [id lb @da rb] = 
    {{scopeAdd ('component',_id._glue ());}}
[[(defun new-${id} ()
(let ((${id} (make-instance 'asc-template :kind "${id}")))
    ${da}
    ${id}))

]]


  component [id lb @da rb] = 
    {{scopeAdd ('component',basename (_id._glue ()));}}
[["${scopeGet ('component')}"
(let ((${scopeGet ('component')} (make-instance 'asc-template :kind "${scopeGet ('component')}")))
    ${da}
    ${scopeGet ('component')})

]]

  declOrAction [da] = [[${da}]]
  declaration [decl] = [[${decl}]]
  
  inputDecl [k @ws id] = [[(nsadd ${scopeGet ('component')} ${id} nil)\n]]
  outputDecl [k @ws id] = [[(nsadd ${scopeGet ('component')} ${id} nil)\n]]

  compositionAction [a] = [[${a}]]
  reactAction [on id arrow @ws cid op] =
    [[(nsadd ${scopeGet ('component')} ${cid} (new-connection ${cid} ${id} (lambda (self m) ${op})))
    ]]

  childDecl [child @ws ic] = 
    [[(add-object ${scopeGet ('component')} ${ic}
    ]]
  reactOperation [r] = [[${r}]]
  reactions [lb @r rb] = [[${r}]]
  reaction [at op] = [[${op}]]

  callOperation [call @ws id] = [[(${basename (id)})\n]]
  sendDownwardOperation [send @ws1 k @ws2 id] =
    [[(send-downward self ${id} m)]]
  sendUpwardOperation [send @ws1 k @ws2 id] = 
    [[(send-upward self ${id} m)]]

  forgetAction [k1 @ws1 k2 @ws2 id] = [[(forget-connection ${scopeGet ('component')} ${id})\n]]

  addChildAction [add @ws1 k @ws2 id1] =
    [[(add-child ${scopeGet ('component')} ${id1} ${basename (id1)})\n]]

  addConnectionAction [add @ws1 k ws2 id1 portid2 portid3] = 
    [[(add-connection ${scopeGet ('component')} (new-connection ${id1} ${portid2} (lambda (self m) (${choose_send (portid2, portid3)} self ${portid3} m))))
    ]]
  
  innerComponent [c] = [[${c}]]

  letBlock [l @ws1 id eq @ws2 e lb @code rb] = 
    [[(let ((${basename (id)} ${e}))
    ${code})
    ]]
  compositionOrReaction [a] = [[${a}]]

  expression [e] = [[${e}]]
  newExpression [n @ws id] = [[(new-${id})]]


  connectionID [id] = [[${id}]]

  absIdent [id @ws] = [[${id}]]
  ident [id @ws] = [[${id}]]
  id [id] = [[${id}]]

  relativeID_nested [path slash1 ns slash2 nsid] = [[(relid ${path} "${ns}" "${nsid}")]]
  relativeID_rootComponent [path slash1 ns slash2 nsid] = [[(relid "." "${ns}" "${nsid}")]]
  
  path_nested [path slash1 ns slash2 nsid] = [[(relid "${path}" "${ns}" "${nsid}")]]
  path_root [c] = [["."]]

  identInNS [id] = [[${id}]]
  numIdent [n] = [[${n}]]
  
  keyword [kw lookws @ws] = [[${kw}${ws}]]
  ns [kw look] = [[${kw}]]

  absoluteIdent [c @cs] = [[${c}${cs}]]
  identFirst [c] = [[${c}]]
  identRest [c] = [[${c}]]
  on [k @ws] = [[${k}${ws}]]
  lb [k @ws] = [[${k}${ws}]]
  rb [k @ws] = [[${k}${ws}]]

  at [k @ws] = [[${k}${ws}]]
  index [d] = [[${d}]]
  dig [c] = [[${c}]]
  
  ws [c] = [[${c}]]
  