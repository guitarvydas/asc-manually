ASCType {
   typedefinitions = typedef+
   typedef = equivalence | typedefinition
   equivalence = foreigntype | typecollection | typeequivalence
   foreigntype = ident "=" ws* "elsewhere" ws*
   typeequivalence = ident "=" ws* identOrBuiltin ws*
   typecollection = ident "=" ws* lbracket identOrBuiltin rbracket
   typedefinition = ident "{" ws* typedefinitionbody+ "}" ws*
   typedefinitionbody =   includeDefinition
                        | collectionDefinition
                        | fieldsDefinition
                        | listDefinition
                        | basicDefinition
                        | elsewhere
                        | other
   basicDefinition = ident ":" ws* ident
   collectionDefinition = ident ":" ws* lbracket ident rbracket
   fieldsDefinition = field+
   listDefinition = ident ":" ws* ident lbracket ident rbracket
   includeDefinition = "include" ws* ident ws*

   elsewhere = "elsewhere" ws*

   field =   ident ":" ident -- namedField
           | ident ~":" -- unnamedField


   identOrBuiltin = builtin | ident
   builtin = "any" ws*
   
   other = notInstantiable | methodDef
   notInstantiable = "not" ws* "instantiable" ws*
   methodDef = "method" ws* toEol ws*

   toEol = notNewline+ newline
   newline = "\n"
   notNewline = ~newline any

   keyword = "not" | "instantiable" | "method" | "any" | "elsewhere"

   ident = ~keyword id ws*
   id = idFirst idRest*
   idFirst = "A" .. "Z" | "a" .. "z"
   idRest = "_" | "0" .. "9" | idFirst

   ws = " " | newline

   lbracket = "[" ws*
   rbracket = "]" ws*
   
}
