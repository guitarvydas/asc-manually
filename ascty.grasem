ASCType {
   typedefinitions = typedef+
   typedef = equivalence | typedefinition
   
   equivalence = ident "=" ws* typeref
     typeref = elsewheretype | typedcollectiontyperef | genericcollectiontyperef | builtintyperef | identtyperef
       elsewheretype = "elsewhere" ws*
       typedcollectiontyperef = ident lbracket identOrBuiltin rbracket
       genericcollectiontyperef = lbracket identOrBuiltin rbracket
       builtintyperef = builtintype
       identtyperef = identtype

	 builtintype = anytype
	     anytype = "any" ws*
	 identtype = ident
	 identOrBuiltin = builtintype | identtype

   typedefinition = ident "{" ws* field+ "}" ws*

   field =   includeFields
           | unnamedField

   includeFields = "include" ws* ident ws*
   unnamedField = ident

   newline = "\n"
   notNewline = ~newline any

   keyword = "any" | "elsewhere" | "include"

   ident = ~keyword id ws*
   id = idFirst idRest*
   idFirst = "A" .. "Z" | "a" .. "z"
   idRest = "_" | "0" .. "9" | idFirst

   ws = " " | newline

   lbracket = "[" ws*
   rbracket = "]" ws*
   
}


   typedefinitions [@tds] =
     {{initializeTypeTable ();}}
     [[${JSON.stringify (getTypeTable ())}]]
     
   typedef [td] = [[${console.log(td)}]]

   equivalence [id k @ws tr] = 
     {{ newType (_id) }}
     [[${typeName ()}]]

     typeref [tr] = [[]]
       elsewheretype [k @ws2] =
         [[${setTypeDescriptor ("","?"), typeName ()}]]
       typedcollectiontyperef [id1 lb id2 rb] =
         [[${setTypeDescriptor (id1, id2)}]]
       genericcollectiontyperef [lb id rb] =
         [[${setTypeDescriptor ("*", id2)}]]
       builtintyperef [id] =
         [[${setTypeDescriptor ("", id)}]]
       identtyperef [id] =    
         [[${setTypeDescriptor ("", id)}]]

         builtintype [id] = [[${id}]]
           anytype [k @ws] = [[?]]
         identtype [id] = [[${id}]]
         identOrBuiltin [id] = [[${id}]]


   typedefinition [id lb @ws1 @fields rb @ws2] =
     {{newType (_id), setTypeDescriptor ("", ".")}}
     [[]]

     field [f] = [[${f}]]
       includeFields [k @ws1 id @ws2] = [[${k}${ws1}${id}${ws2}]]
       unnamedField [id] = [[${id}]]
   


   newline [c] = [[${c}]]
   notNewline [c] = [[${c}]]

   keyword [k] = [[${k}]]

   ident [id @ws] = [[${id}]]
   id [c @cs] = [[${c}${cs}]]
   idFirst [c] = [[${c}]]
   idRest [c] = [[${c}]]

   ws [c] = [[${c}]]

   lbracket [c @ws] = [[${c}]]
   rbracket [c @ws] = [[${c}]]

