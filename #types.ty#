component {
    kind : name
    inputs : namespace [input]
    outputs : namespace [output]

    not instantiable

    method initially
    method react (message)
    method /busy >> boolean
    method /ready >> boolean

}

name = kind
composite {
    include component
    children : namespace [component]
    connections : namespace [connection]  
}compositeRunnable {
  include composite
  include runnable
  children: [nameChildPair]
}

nameChildPair { name component }
connection {
  name
  sender
  receiver
}

sender { connectionComponent tag }
receiver { connectionComponent tag }
connectionComponent = component
dispatcher {
  all : [component]
}

input = name
leaf {
    include component
}leafRunnable {
  include leaf
  include runnable
}
message { tag data }

data = any
name = elsewhere
namespace = [name]
connection {
  name
  sender
  receiver
}

XFgenXGGXFsender = { connectionComponent tag }
receiver = { connectionComponent tag }
connectionComponent = component


operation design rule {
  check ../:contains (./sender/component) "valid sender for composite"
  check ../:contains (./receiver/component) "valid receiver for composite"

  check ./sender:validSenderTag (./tag) "valid sender tag"
  check ./receiver:validReceiverTag (./tag) "valid receiver tag"
}output = name
queue {
  elsewhere
}runnable {
  inputQueue: queue
  outputQueue: queue
}tag = foreign