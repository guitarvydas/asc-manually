BRACES2FB {
  topRect = ws* "{" ws* "rect" ws* absolute_ident ws* nested+ "}" ws*
  
  object = rect | circle | text | connector

  rect = "rect" ws* qid ws* nested?
  circle = "circle" ws* qid ws* nested?
  text = "text" ws* qid ws* string
  connector = "connector" ws* qid sender receiver

  nested = "{" ws* objectOrAttribute+ "}" ws*

  objectOrAttribute = (object | attribute)

  attribute = (colorAttribute)

  colorAttribute = "color" ws* color
  
  sender = qid
  receiver = qid

  qid = qualified_ident ws*




      /* low-level */
      color = rgbaColor | constantColor
      rgbaColor = rgba ws*
      constantColor = ("green" | "yellow" | "red") ws*


      qualified_ident = componentRelativeName | rootRelativeName 
      componentRelativeName = root componentNamespace componentPath namespace basename
      rootRelativeName = root namespace basename
      componentPath = absolute_ident "/"
      numeric_name = dig+ 
      basename = absolute_ident | numeric_name
      namespace = ("i" | "o" | "c" | "x" |"n") "/"
      componentNamespace = "c" "/"
      root = "./"

      absolute_ident = ~avoid absolute_ident_first_char absolute_ident_more_char* 
      absolute_ident_first_char = "a" .. "z"
      absolute_ident_more_char = absolute_ident_first_char | dig

      number = dig+
      dig = "0" .. "9"
      rgba = hex hex hex hex
      hex = hd hd
      hd = dig | (~keyword "A" .. "F")

      string = dq notDQ* dq ws*
      dq = "\""
      notDQ = ~dq ~newline any
      ws = " " | "\t" | newline
      newline = "\n"

      keyword = constantColor | namespace
      delimiter = "." | "/" | dq | ws
      
      avoid = delimiter | namespace | keyword

}



include(`brace2fb.glue')
include(`ident.glue')
include(`low-level.glue')
